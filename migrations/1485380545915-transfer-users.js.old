'use strict';

var dbConnect = require('./dbConnect'),
    Q = require('q'),
    User = dbConnect.mongoose.model('User'),
    Identity = dbConnect.mongoose.model('Identity'),
    Advocate = dbConnect.mongoose.model('Advocate'),
    Tenant = dbConnect.mongoose.model('Tenant');

exports.up = function(next) {

  var inserted = 0;
  var saveNewTenant = function(identity, tenant) {

    var saved = Q.defer();

    var newUser = new User();
    newUser.kind = 'Tenant';
    
    Q.allSettled([identity.save(), tenant.save()])
      .spread(function (identity, userdata) {

        console.log('saved', identity.phone);

        // save the ObjectID references of the two documents
        newUser._identity = identity.value._id;
        newUser._userdata = userdata.value._id;

        return newUser.save();
      })
      .then(function (user) {
        saved.resolve();
      })
      .catch(function (err) {
        console.log('err', err);
      });

    return saved.promise;
  };

  // Remove UsersOld

  // Clean up Sessions?

  dbConnect.mongodb.then(function (mongodb) {

    // get the collection needed
    var users = mongodb.collection('users_old');

    //execute the query and get a cursor
    var userCursor = users.find({});
    var userLength = userCursor.length;

    // For each user in UsersOld
    userCursor.each(function (err, doc) {
      if (err) {
        console.log(err);
      } else {

        if (doc !== null) {

          // Do what you need to do
          // it feels like it'll cause problems if we keep this
          delete doc._id;

          // Create Tenant and Identity
          var newIdentity = new Identity(doc);
          var newTenant = new Tenant(doc);

          newIdentity.provider = 'local';

          // If they have a referral:
          if(doc.referral) {

            Advocate.findOne({ code: { $regex: new RegExp("^" + doc.referral.code + "$", "i") } })
              .then(function (advocate) {

                if(advocate) {
                  newTenant.advocate = advocate._id;
                  newTenant.advocateRole = 'linked';
                }

                saveNewTenant(newIdentity, newTenant).then(function () {
                  console.log('new user', inserted);

                  if(++inserted === userLength) {
                    mongodb.close();
                    next();
                  }
                });
              });

          } else {

            saveNewTenant(newIdentity, newTenant).then(function () {
              console.log('new user', inserted);

              if(++inserted === userLength) {
                mongodb.close();
                next();
              }
            });
          }
        } // doc !== null
      } // !error
    });
  });
};

exports.down = function(next) {
  next();
};

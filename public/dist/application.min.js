"use strict";var ApplicationConfiguration=function(){var applicationModuleName="trowel",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("issues"),ApplicationConfiguration.registerModule("users"),angular.module("core").run(["$rootScope",function($rootScope){$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider","$provide",function($stateProvider,$urlRouterProvider,$provide){$provide.decorator("accordionGroupDirective",["$delegate",function($delegate){return $delegate[0].templateUrl="bootstrap-templates/accordion/accordion-group.html",$delegate}]),$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("phoneInput",["$filter","$browser",function($filter,$browser){return{require:"ngModel",link:function($scope,$element,$attrs,ngModelCtrl){var listener=function(){var value=$element.val().replace(/[^0-9]/g,"");$element.val($filter("tel")(value,!1))};ngModelCtrl.$parsers.push(function(viewValue){return viewValue.replace(/[^0-9]/g,"").slice(0,10)}),ngModelCtrl.$render=function(){$element.val($filter("tel")(ngModelCtrl.$viewValue,!1))};var unbindAfterInit=$scope.$watch(function(){return ngModelCtrl.$modelValue},function(value){$element.val($filter("tel")(ngModelCtrl.$viewValue,!1)),unbindAfterInit()});$element.bind("change",listener),$element.bind("keydown",function(event){var key=event.keyCode;91===key||key>15&&19>key||key>=37&&40>=key||$browser.defer(listener)}),$element.bind("paste cut",function(){$browser.defer(listener)})}}}]),angular.module("core").filter("tel",function(){return function(tel){if(!tel)return"";var value=tel.toString().trim().replace(/^\+/,"");if(value.match(/[^0-9]/))return tel;var city,number;switch(value.length){case 1:case 2:case 3:city=value;break;default:city=value.slice(0,3),number=value.slice(3)}return number?(number=number.length>3?number.slice(0,3)+"-"+number.slice(3,7):number,("("+city+") "+number).trim()):"("+city}}),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("issues").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Issues","issues","dropdown","/issues(/create)?"),Menus.addSubMenuItem("topbar","issues","List Issues","issues"),Menus.addSubMenuItem("topbar","issues","New Issue","issues/create")}]),angular.module("issues").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.when("/issues/create","/issues/create/checklist"),$stateProvider.state("listIssues",{url:"/issues",templateUrl:"modules/issues/views/list-issues.client.view.html"}).state("createIssue",{url:"/issues/create",templateUrl:"modules/issues/views/create-issue.client.view.html","abstract":!0}).state("createIssue.checklist",{url:"/checklist",title:"Room Checklist",templateUrl:"modules/issues/partials/create-issue-checklist.client.view.html"}).state("createIssue.general",{url:"/general",title:"General Info",templateUrl:"modules/issues/partials/create-issue-general.client.view.html"}).state("createIssue.personal",{url:"/personal",title:"Personal Information",templateUrl:"modules/issues/partials/create-issue-personal.client.view.html"}).state("createIssue.contact",{url:"/contact",title:"Who To Contact",templateUrl:"modules/issues/partials/create-issue-contact.client.view.html"}).state("createIssue.review",{url:"/review",title:"Review",templateUrl:"modules/issues/partials/create-issue-review.client.view.html"}).state("updateIssues",{url:"/issues/update",templateUrl:"modules/issues/views/update-issues.client.view.html"})}]),angular.module("issues").controller("IssuesChecklistController",["$scope","IssuesChecklist",function($scope,IssuesChecklist){$scope.checklist={},$scope.open=[],void 0===$scope.updateView&&($scope.updateView=!1),IssuesChecklist.get().then(function(data){var i=0;for(var area in data[0]){var items=data[0][area];$scope.checklist[area]={numChecked:$scope.newIssue.issues[area]?$scope.newIssue.issues[area].length:0,values:items},$scope.newIssue.issues[area]||($scope.newIssue.issues[area]=[]),items.forEach(function(item){$scope.issues[area]&&-1!==$scope.issues[area].indexOf(item)&&$scope.select(area,item)}),$scope.open[i++]=!1}}),$scope.oneAtATime=!0,$scope.status={idx:-1,isFirstOpen:!0,isFirstDisabled:!1},$scope.select=function(area,item){if(this.isSelected(area,item)){var i=$scope.newIssue.issues[area].indexOf(item);$scope.newIssue.issues[area].splice(i,1),$scope.checklist[area].numChecked--}else $scope.newIssue.issues[area].push(item),$scope.checklist[area].numChecked++},$scope.isSelected=function(area,item){return $scope.newIssue.issues[area]?-1!==$scope.newIssue.issues[area].indexOf(item):!1},$scope.closeGroup=function(idx){$scope.open[idx]=!1}}]),angular.module("issues").controller("IssuesController",["$scope","$location","$http","Authentication","Users",function($scope,$location,$http,Authentication,Users){$scope.authentication=Authentication,$scope.authentication.user?$scope.issues=$scope.authentication.user.issues:$scope.issues={},$scope.newIssue={},$scope.newIssue.issues={},$scope.create=function(){var newUser={fullName:$scope.newIssue.name,phone:$scope.newIssue.phone,borough:$scope.newIssue.borough,address:$scope.newIssue.address,unit:$scope.newIssue.unit,issues:$scope.newIssue.issues,password:$scope.newIssue.password};$http.post("/auth/signup",newUser).success(function(response){$scope.authentication.user=response,$location.path("/issues")}).error(function(response){$scope.error=response.message})},$scope.update=function(){$scope.authentication.user.issues=$scope.newIssue.issues;var user=new Users($scope.authentication.user);user.$update(function(response){Authentication.user=response,$scope.authentication.user=response,$location.path("/issues")},function(response){$scope.error=response.data.message})},$scope.hasIssues=function(){for(var area in $scope.issues)if($scope.issues[area].length)return!0;return!1},console.log($scope.hasIssues())}]),angular.module("issues").factory("IssuesChecklist",["$http","$q",function($http,$q){var checklist="data/checklist.json",request=function(url){var deferred=$q.defer();return $http.get(url).success(function(data){deferred.resolve(data)}).error(function(){deferred.reject()}),deferred.promise};return{get:function(){return request(checklist)}}}]),angular.module("issues").factory("Issues",["$resource",function($resource){return $resource("issues/:issueId",{issueId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$rootScope","$q","$location","Authentication",function($rootScope,$q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,"POST"===rejection.config.method&&"issues"===rejection.config.url&&($rootScope.tempNewIssue=rejection.config.data),$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$rootScope","$scope","$http","$location","Authentication",function($rootScope,$scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/ssues"),$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/issues")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","$filter","Users","Authentication",function($scope,$http,$location,$filter,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);console.log("user",user),user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"},getIssues:{method:"GET"}})}]);